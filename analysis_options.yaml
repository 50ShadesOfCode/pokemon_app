#  Specify analysis options.
#
#  This list of linter rules include the most useful predefined rulesets from:
#
#  pedantic: https://github.com/google/pedantic
#  effective_dart: https://github.com/tenhobi/effective_dart
#  flutter: https://github.com/flutter/flutter/blob/master/packages/flutter/lib/analysis_options_user.yaml
#
#  There are other similar analysis options files in the flutter repos,
#  so feel free to add, enable or disable rules.
#
#  This file contains the analysis options used by Flutter tools, such as IntelliJ,
#  Android Studio, and the `flutter analyze` command.

analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: true
  errors:
    missing_required_param: error
    missing_return: error
    todo: warning
    # allow self-reference to deprecated members (we do this because otherwise we have
    # to annotate every member in every test, assert, etc, when we deprecate something)
    deprecated_member_use_from_same_package: ignore
    # Ignore analyzer hints for updating pubspecs when using Future or
    # Stream and not importing dart:async
    # Please see https://github.com/flutter/flutter/pull/24528 for details.
    sdk_version_async_exported_from_core: ignore
  exclude:
    - "bin/cache/**"
    - "plugins/model_generator/**"
    - "plugins/here_sdk/**"

linter:
  rules:
    # STYLE
    - always_put_required_named_parameters_first # SPECIFY required on named parameter before other named parameters
    - camel_case_extensions # DO name extensions using UpperCamelCase
    - camel_case_types # DO name types using UpperCamelCase
    - curly_braces_in_flow_control_structures # DO use curly braces for all flow control structures
    - directives_ordering # DO place “dart:” imports before other imports
    #    - empty_catches # AVOID empty catch blocks
    - empty_constructor_bodies # DO use ; instead of {} for empty constructor bodies
    - empty_statements # AVOID empty statements
    - file_names # DO name source files using lowercase_with_underscores
    #    - lines_longer_than_80_chars # AVOID lines longer than 80 characters
    - library_names # DO name libraries using lowercase_with_underscores
    - library_prefixes # DO use lowercase_with_underscores when specifying a library prefix
    - non_constant_identifier_names # DO name non-constant identifiers using lowerCamelCase
    - package_prefixed_library_names # DO prefix library names with the package name and a dot-separated path
    - prefer_single_quotes # use single quotes where they wouldn't require additional escapes
    - slash_for_doc_comments # PREFER using /// for doc comments
    #    - sort_unnamed_constructors_first # DO sort unnamed constructor declarations first, before named ones
    - unnecessary_brace_in_string_interps # AVOID using braces in interpolation when not needed
    - unnecessary_parenthesis # AVOID using parenthesis when not needed
    - unnecessary_string_escapes # REMOVE unnecessary backslashes in strings
    - unnecessary_string_interpolations # DON’T USE string interpolation if there's only a string expression in it

    # USAGE
    - always_declare_return_types # DO declare method return types
    #    - always_put_control_body_on_new_line # DO separate the control structure expression from its statement
    - always_specify_types # specify type annotations
    - annotate_overrides # annotate overridden methods and fields
    #    - avoid_bool_literals_in_conditional_expressions # AVOID bool literals in conditional expressions
    - avoid_empty_else # AVOID empty else statements
    - avoid_equals_and_hash_code_on_mutable_classes # AVOID overloading operator == and hashCode on classes not marked @immutable
    - avoid_init_to_null # DON'T explicitly initialize variables to null
    - avoid_null_checks_in_equality_operators # DON'T check for null in custom == operators.
    - await_only_futures # AVOID using await on anything other than a future
    #    - avoid_returning_this # AVOID returning this from methods just to enable a fluent interface
    - avoid_return_types_on_setters # AVOID return types on setters
    - avoid_relative_lib_imports # DO avoid relative imports for files in lib/
    - avoid_renaming_method_parameters # DON'T rename parameters of overridden methods.
    - avoid_returning_null_for_void # AVOID returning null for void
    - avoid_shadowing_type_parameters # AVOID shadowing type parameters
    - avoid_single_cascade_in_expression_statements # AVOID single cascade in expression statements
    - avoid_slow_async_io # AVOID using the following asynchronous file I/O methods because they are much slower than their synchronous counterparts
    - avoid_types_as_parameter_names #AVOID using a parameter name that is the same as an existing type
    - avoid_unused_constructor_parameters # AVOID defining unused parameters in constructors
    - avoid_void_async # DO mark async functions to return Future
    - cancel_subscriptions # DO invoke cancel on instances of dart.async.StreamSubscription
    - control_flow_in_finally # AVOID control flow leaving finally blocks
    - exhaustive_cases # DO define case clauses for all constants in enum-like classes
    - hash_and_equals # DO override hashCode if overriding == and prefer overriding == if overriding hashCode
    #    - implementation_imports # DON'T import implementation files from another package
    - iterable_contains_unrelated_type # DON'T invoke contains on Iterable with an instance of different type than the parameter type
    - list_remove_unrelated_type # DON'T invoke remove on List with an instance of different type than the parameter type
    - no_duplicate_case_values # DON'T use more than one case with same value
    - no_logic_in_create_state # DON'T put any logic in createState()
    - prefer_adjacent_string_concatenation # DO use adjacent strings to concatenate string literals
    - prefer_asserts_in_initializer_lists # DO put asserts in initializer list for constructors with only asserts in their body
    - prefer_collection_literals # DO use collection literals when possible
    - prefer_conditional_assignment # PREFER using ??= over testing for null
    - prefer_const_constructors_in_immutables # PREFER declaring const constructors on @immutable classes
    - prefer_const_declarations # PREFER using const for const declarations
    - prefer_const_literals_to_create_immutables # PREFER using const for instantiating list, map and set literals used as parameters in immutable class instantiations
    - prefer_contains # DON'T use indexOf to see if a collection contains an element
    - prefer_equal_for_default_values # DO Use = to separate a named parameter from its default value
    - prefer_final_fields # DO prefer declaring private fields as final if they are not reassigned later in the library
    - prefer_final_in_for_each # DO prefer declaring for-each loop variables as final if they are not reassigned later in the code
    - prefer_final_locals # DO prefer declaring variables as final if they are not reassigned later in the code
    - prefer_foreach # DO use forEach if you are only going to apply a function or a method to all the elements of an iterable
    - prefer_function_declarations_over_variables # DO use a function declaration to bind a function to a name
    - prefer_generic_function_type_aliases # PREFER generic function type aliases
    - prefer_if_null_operators # Prefer using if null operators instead of null checks in conditional expressions
    - prefer_initializing_formals # DO use initializing formals when possible
    #    - prefer_interpolation_to_compose_strings # PREFER using interpolation to compose strings and values
    - prefer_inlined_adds # Declare elements in list literals inline, rather than using add and addAll methods where possible
    - prefer_iterable_whereType # PREFER iterable.whereType<T>() over iterable.where((e) => e is T)
    - prefer_is_empty # DON'T use length to see if a collection is empty
    - prefer_is_not_empty # PREFER x.isNotEmpty to !x.isEmpty for Iterable and Map instances
    - prefer_is_not_operator # When checking if an object is not of a specified type, it is preferable to use the 'is!' operator
    #    - prefer_mixin # syntax for mixin
    - prefer_spread_collections # Use spread collections when possible
    - prefer_typing_uninitialized_variables # PREFER specifying a type annotation for uninitialized variables and fields
    - prefer_void_to_null # DO NOT use the type Null where void would work
    - prefer_const_constructors # PREFER using const for instantiating constant constructors.
    - recursive_getters # DON'T create recursive getters
    - test_types_in_equals # DO test type arguments in operator ==(Object other)
    - throw_in_finally # AVOID throwing exceptions in finally blocks
    - type_annotate_public_apis # PREFER type annotating public APIs
    - type_init_formals # If a constructor parameter is using this.x to initialize a field, then the type of the parameter is understood to be the same type as the field
    - unnecessary_const # AVOID repeating const keyword in a const context
    - unnecessary_getters_setters # AVOID wrapping fields in getters and setters just to be «safe"
    - unnecessary_lambdas # DON'T create a lambda when a tear-off will do.
    - unnecessary_new # AVOID new keyword to create instances
    - unnecessary_null_aware_assignments # AVOID null in null-aware assignment
    - unnecessary_null_in_if_null_operators # AVOID using null as an operand in if null operators
    - unnecessary_overrides # DON'T override a method to do a super method invocation with same parameters
    - unnecessary_statements # AVOID using unnecessary statements
    - unnecessary_this # DON'T use this when not needed to avoid shadowing
    - unrelated_type_equality_checks # DON'T Compare references of unrelated types for equality
    - use_full_hex_values_for_flutter_colors # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color
    - use_is_even_rather_than_modulo # PREFER the use of intValue.isOdd/isEven to check for evenness
    #    - use_setters_to_change_properties # DO use a setter for operations that conceptually change a property
    - valid_regexps # DO use valid regular expression syntax when creating regular expression instances
    - void_checks # DO NOT assign to void
